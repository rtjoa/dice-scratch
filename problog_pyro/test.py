PROBLOG_CMD_FORMAT = ["problog", "{instance_path}", "-a", "{num_bits}"]
PROBLOG_COMMENT_FORMAT = "%% %s"

PYTHON_CMD_FORMAT = ["python3", "{instance_path}", "{num_bits}"]
PYTHON_COMMENT_FORMAT = "# %s"

OOPSLA_CMD_FORMAT = ["../Dice.native", "{instance_path}"]
DICE_CMD_FORMAT = ["../newdice/_build/default/bin/dice.exe", "-eager-eval", "{instance_path}"]
DICE_COMMENT_FORMAT = "// %s"

JULIA_CMD_FORMAT = ["julia", "--project", "{instance_path}", "{num_bits}"]
JULIA_COMMENT_FORMAT = "# %s"

TEST_TEMPLATES = [
    # ("circuit.problog", PROBLOG_CMD_FORMAT, PROBLOG_COMMENT_FORMAT),
    # ("linear.problog", PROBLOG_CMD_FORMAT, PROBLOG_COMMENT_FORMAT),
    # ("mix.problog", PROBLOG_CMD_FORMAT, PROBLOG_COMMENT_FORMAT),
    # ("bwh.problog", PROBLOG_CMD_FORMAT, PROBLOG_COMMENT_FORMAT),
    # ("pyro_template.py", PYTHON_CMD_FORMAT, PYTHON_COMMENT_FORMAT),
    # ("oopsla_template.dice", OOPSLA_CMD_FORMAT, DICE_COMMENT_FORMAT),
    # ("uniform.dice", DICE_CMD_FORMAT, DICE_COMMENT_FORMAT),
    ("dice.dice", DICE_CMD_FORMAT, DICE_COMMENT_FORMAT),
    # ("bwh.jl", JULIA_CMD_FORMAT, JULIA_COMMENT_FORMAT),
    # ("sbk.jl", JULIA_CMD_FORMAT, JULIA_COMMENT_FORMAT),
    # ("interleaved.jl", JULIA_CMD_FORMAT, JULIA_COMMENT_FORMAT),
    # ("uniform.jl", JULIA_CMD_FORMAT, JULIA_COMMENT_FORMAT),
    # ("interleaved_lsb_first.jl", JULIA_CMD_FORMAT, JULIA_COMMENT_FORMAT),
]

TESTS = [
    # "less",
    # "equals",
    "sum",
]
NS = list(range(1, 101))
TIMEOUT = 60 * 60 * 2
REPETITIONS = 5  # take median of these

BUILD_DIR = "build"
OUTPUT_DIR = "output"

######

import os
import sys
import subprocess
from datetime import datetime
from statistics import median

timestamp = datetime.now().strftime("%Y-%m-%d_%Hh%Mm%Ss")
timestamp = f"{timestamp}_{TIMEOUT}_{REPETITIONS}"

# Create a version of `template_file` that only runs the code needed for
# `test`, and save to `instance_path`.
def instantiate_template(template_file, test, instance_path, comment_format, num_bits):
    with open(template_path, "r") as template_file:
        with open(instance_path, "w") as instance_file:
            instance_file.write(
                comment_format % "This file was auto-generated by test.py"
                + "\n"
                + comment_format % f"Template file: {template_path}"
                + "\n\n\n" 
            )
            cur_filter = None
            for line in template_file.readlines():
                if "~begin " in line:
                    before, after = line.split("~begin ")
                    cur_filter = after.strip()
                elif "~end" in line:
                    cur_filter = None
                elif cur_filter is None or test in cur_filter:
                    if "~py " in line:
                        before, after = line.split("~py ")
                        code = after.strip()
                        instance_file.write(eval(code))
                        instance_file.write("\n")
                    else:
                        instance_file.write(line)

if not os.path.isdir(BUILD_DIR):
    os.mkdir(BUILD_DIR)

if not os.path.isdir(OUTPUT_DIR):
    os.mkdir(OUTPUT_DIR)

def flprint(*args, **kwargs):
    print(*args, flush=True, **kwargs)

def time_cmd(cmd, timeout, repetitions):
    try:
        times = []
        for _ in range(repetitions):
            completed = subprocess.run(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                timeout=timeout,
            )
            flprint(f"stdout: {completed.stdout} ;;; stderr: {completed.stderr}")

            if completed.returncode == 137:
                flprint("Out of memory; got return code 137. Treating as timeout")
                return None
            if completed.returncode != 0:
                flprint(f"Non-zero return code {completed.returncode}")
                sys.exit(completed.returncode)

            time = completed.stderr.decode('utf-8').strip()
            times.append(float(time))
        return median(times)
    except subprocess.TimeoutExpired:
        flprint(f"Timed out after {TIMEOUT}s.")
        return None

for test in TESTS:
    flprint(f"=== Performing test \"{test}\" ===")
    output_path = os.path.join(OUTPUT_DIR, f"{timestamp}_{test}.csv")

    for template_path, cmd_format, comment_format in TEST_TEMPLATES:
        flprint(f"Template {template_path}")
        for num_bits in NS:
            instance_path = os.path.join(BUILD_DIR, f"{timestamp}_{test}_{num_bits}b_{template_path}")
            instantiate_template(template_path, test, instance_path, comment_format, num_bits)
            cmd = ["time", "-f", "%e"]
            cmd.extend(
                segment.format(num_bits=num_bits, instance_path=instance_path)
                for segment in cmd_format
            )
            flprint(f"Running n={num_bits}")
            elapsed = time_cmd(cmd, TIMEOUT, REPETITIONS)
            if elapsed is None:
                break
            
            with open(output_path, "a") as output_file:
                output_file.write("\t".join([template_path, str(num_bits), str(elapsed)]) + "\n")

    flprint()
