TEST_TEMPLATES = ["circuit.problog", "linear.problog"]
TESTS = ["less", "equals", "sum"]

NS = list(range(1, 31))
TIMEOUT = 120

BUILD_DIR = "build"
OUTPUT_DIR = "output"

######

import os
import sys
import subprocess
from datetime import datetime
from time import perf_counter

timestamp = datetime.now().strftime("%Y-%m-%d_%Hh%Mm%Ss")

# Create a version of `template_file` that only runs the code needed for
# `test`, and save to `instance_path`.
def instantiate_template(template_file, test, instance_path):
    with open(template_path, "r") as template_file:
        with open(instance_path, "w") as instance_file:
            instance_file.write(f"% This file was auto-generated by test.py\n")
            instance_file.write(f"% Template file: {template_path}\n\n\n")
            cur_filter = None
            for line in template_file.readlines():
                if "~begin " in line:
                    before, after = line.split("~begin ")
                    cur_filter = after.strip()
                elif "~end" in line:
                    cur_filter = None
                elif cur_filter is None or test in cur_filter:
                    instance_file.write(line)

if not os.path.isdir(BUILD_DIR):
    os.mkdir(BUILD_DIR)

if not os.path.isdir(OUTPUT_DIR):
    os.mkdir(OUTPUT_DIR)

for test in TESTS:
    print(f"=== Performing test \"{test}\" ===")
    output_path = os.path.join(OUTPUT_DIR, f"{test}_{timestamp}.csv")

    for template_path in TEST_TEMPLATES:
        print(f"Template {template_path}")
        instance_path = os.path.join(BUILD_DIR, f"{test}_{template_path}")
        instantiate_template(template_path, test, instance_path)
        for n in NS:
            cmd = ["time", "-f", '%e', "problog" ,"-a", str(n), instance_path]
            try:
                print(f"Running n={n}")
                completed = subprocess.run(
                    cmd,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    timeout=TIMEOUT,
                )
                print(f"stdout: {completed.stdout} ;;; stderr: {completed.stderr}")

                if completed.returncode != 0:
                    print(f"Non-zero return code {completed.returncode}")
                    sys.exit(completed.returncode)

                time = completed.stderr.decode('utf-8').strip()

                with open(output_path, "a") as output_file:
                    output_file.write("\t".join([template_path, str(n), time]) + "\n")

            except subprocess.TimeoutExpired:
                print(f"Timed out after {TIMEOUT}s.")
                break
    print()