% This file was auto-generated by test.py
% Template file: circuit.problog


%%%%%% SHARED SETUP %%%%%%

num_bits(N) :- cmd_args([NAtom]), atom_number(NAtom, N).

is_var(a).
is_var(b).

not(f, t).
not(t, f).
xor(f, f, f).
xor(f, t, t).
xor(t, f, t).
xor(t, t, f).
and(f, f, f).
and(f, t, f).
and(t, f, f).
and(t, t, t).
or(f, f, f).
or(f, t, t).
or(t, f, t).
or(t, t, t).
eq(f, f, t).
eq(f, t, f).
eq(t, f, f).
eq(t, t, t).
lt(f, f, f).
lt(f, t, t).
lt(t, f, f).
lt(t, t, f).
at_least_two_of_three(f, f, f, f).
at_least_two_of_three(f, f, t, f).
at_least_two_of_three(f, t, f, f).
at_least_two_of_three(f, t, t, t).
at_least_two_of_three(t, f, f, f).
at_least_two_of_three(t, f, t, t).
at_least_two_of_three(t, t, f, t).
at_least_two_of_three(t, t, t, t).
ite(t, X, Y, X).
ite(f, X, Y, Y).

0.5::flip(X, f); 0.5::flip(X, t).
bit(Var, I, Val) :- num_bits(N), between(1, N, I), is_var(Var), flip([Var, I], Val).



%%%%%% ADDITION %%%%%%

add_carry_in(X, Y, 1, f).
add_carry_in(X, Y, I, Res) :-
    Im1 is I - 1,
    bit(X, Im1, Xi1),
    bit(Y, Im1, Yi1),
    add_carry_in(X, Y, Im1, Carry1),
    at_least_two_of_three(Xi1, Yi1, Carry1, Res).

bit(add(X, Y), I, Res) :-
    bit(X, I, Xi), bit(Y, I, Yi),
    add_carry_in(X, Y, I, Carry),
    xor(Xi, Yi, Xor1),
    xor(Xor1, Carry, Res).

final_carry(X, Y, Res) :-
    num_bits(N),
    Np1 is N + 1,
    add_carry_in(a, b, Np1, Res).

query(bit(add(a, b), _, t)).
query(final_carry(a, b, t)).

